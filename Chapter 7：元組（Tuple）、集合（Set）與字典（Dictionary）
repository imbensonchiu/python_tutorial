:::info
NTUIM Camp - Materials for Python - Dictionary, Set, and Tuple
教材編寫者：台大資管三 黃芷榆
:::


>　**Table of Contents**
[ToC]
---

在上一節我們學到串列 list，在 Python 中還有許多資料型別可以當容器使用。今天要介紹的有元組、集合以及字典。

## 元組（Tuple）
Tuple 和 list 非常相似，主要的不同是 tuple 建立之後便無法更改裡面的資料。

### 建立元組
首先就讓我們來看看要如何建立／宣告元組吧！
值得注意的是，元組大多是用小括號 () 來做表示，而 list 則是用中括號表示。
```python=
a_tuple = tuple()
b_tuple = ()
c_tuple = (1, 'd', 5.6, True)
```

那麼我們也想像串列一樣去增加元組裡的值，這樣會可行的嗎？
```python=
a_tuple.add(1)
```
```
AttributeError                            Traceback (most recent call last)
----> 1 a_tuple.add(1)

AttributeError: 'tuple' object has no attribute 'add'
```
tuple 是不能去增加的！因為 tuple 的值不可做更改。

同樣的規則適用於刪除和修改，程式都會報錯，tuple 只能取出值來喔！

## 集合（Set）
Set 也是一個不同裝資料的容器，它的特色是每個值只出現一次，且他們是沒有位置關係的。

### 建立集合
請注意，set 我們會用大括號表示：
```python=
a_set = set()
b_set = {1, 2, 3, 4}
c_set = {2, '2'}
```
### 更新集合
再來我們來看看要如何對 set 的資料做增減吧！
1. add：增加一筆資料
```python=
a_set.add(6)
a_set # {6}
```
2. update：加上另一個 set
```python=
b_set.update(c_set)
b_set # {1, 2, '2', 3, 4}
```
> 注意！重複的部分僅會留下一個

3. remove：移除某個值，找不到該值會產生錯誤
```python=
b_set.remove(3)
b_set # {1, 2, '2', 4}
b_set.remove(5) # error
```
4. discard：也是移除某個值，但是找不到該值時不會產生錯誤
```python=
b_set.discard(4) # {1, 2, '2'}
b_set.discard(5) # {1, 2, '2'}
```

Set 無法去做更改，因為它僅僅是儲存不重複的資料，沒有對應關係。

## 字典（Dictionary）
這是有鍵（key）以及值（value）去對應的容器。要注意的是我們的 key 不會重複，value 則是都可以。

### 建立字典
我們建立字典的語法是使用大括號以及冒號：
```python=
a_dict = dict()
b_dict = {}
c_dict = {'apple': 3, 'newspaper': 6, 'train': 1}
```
我們的 key 是 "apple", "newspaper" 以及 "train"，它們分別對應到的是 value 是 $3$, $6$, 以及 $1$。

而當我們想要取出某個 key 所對應到的 value，我們可以用這樣的語法：```dict[key]```，舉例來說，我們想知道 'apple' 這個 key 所對應的 value 是多少，就可以寫：
```python=
c_dict['apple'] # 3 
```
我們的程式便會回傳給我們它的 value，也就是 $3$。
### 更新字典
1. 增加：dict[key] = value、update
```python=
c_dict['boat'] = 8 # {'apple': 3, 'newspaper': 6, 'train': 1, 'boat': 8}
c_dict.update({'bus': 7}) # {'apple': 3, 'newspaper': 6, 'train': 1, 'boat': 8, 'bus': 7}
```
2. 刪除

```python=
c_dict.pop('apple') # {'newspaper': 6, 'train': 1, 'boat': 8, 'bus': 7}
# pop 後會回傳 'apple' 的 value：3
del c_dict['bus'] # {'newspaper': 6, 'train': 1, 'boat': 8}
```
3. 更改
與增加一樣是用 dict[key] = value 以及 update 的語法
```python=
c_dict['newspaper'] = 5 # {'newspaper': 5, 'train': 1, 'boat': 8}
c_dict.update({'boat': 6}) # {'newspaper': 5, 'train': 1, 'boat': 6}
```


### 分別取出鍵、值
1. ```keys()```：取得所有 key
```python=
score_dict = {'Math': 88, 'English': 97, 'Science': 90}

for key in score_dict.keys():
    print(key, end = ' ')
```
程式會印出：
```
Math English Science 
```
2. ```values()```：取得所有 value
```python=
for value in score_dict.values():
    print(value, end = ' ')
```
程式會印出：
```
88 97 90 
```
3. ```items()```：取得所有 key 以及 value

我們可以用 ```a, b = dict.items()```，Python 便會依序分配 key 以及 value 給兩個變數：
```python=
for key, value in score_dict.items():
    print(key, ":", value)
```
程式會印出：
```
Math : 88
English : 97
Science : 90
```
我們可以看到每一層的迴圈都會取到字典裡的 key 以及對應的 value。
