:::info
NTUIM Camp - Materials for Python - Function
教材編寫者：台大資管三 黃芷榆
:::


>　**Table of Contents**
[ToC]
---

## 函式簡介
**函式 (function)** 簡單解釋是將傳入的數值進行邏輯運算，最後再回傳結果。

函式的**組成元素**主要有：
1. 開頭函式取名
2. 傳入的參數
3. 中間的運算程式
4. 回傳值

格式如下：
```python=
def 函式名稱(傳入的參數):
    **
    計算過程
    **
    return 回傳值
```
舉例來說
我們想要寫一個 function 專門算一個數的平方，我們想成是數學裡學到的函式，即為這樣的列式：$f(x)=x^2$ 用程式來寫就會像是：
```python=
def sqrt(num):
    result = num ** 2
    return result
```

## 為甚麼要用 Function 呢？
那麼我們為甚麼要使用函式呢？在撰寫大檔案且會不停重複使用到某些函式時，函式是不可或缺的功能！讓我們來看看它有甚麼好用之處吧。
1. **模組化**：將功能一樣的方法包在同一個地方
2. **可讀性**：明瞭的取名讓讀 code 更加方便
3. **維護性**：當要更改功能裡的某個值，不怕多處遺漏


## 參數預設
從上面的內容我們知道大多參數是希望使用者輸入，但是有時候我們就算使用者不傳入該參數，我們也有一個預設值（通常是該參數最常用用到的內容）。

這個時候，我們就會需要用到「參數預設」！

我們用例子來看要如何設定參數預設，假如我們要算參數的「倍數」，可能是兩倍、三倍、四倍……，但是在大部分時候我們覺得使用的時候會是兩倍，那麼我們就可以把 ```multiple``` 這個參數預設成 $2$ 
```python=
def multiple(num, multi = 2):
    result = num * multi
    return result

multiple(3) # 6
multiple(3, 5) # 15
```

## 遞迴

函式最方便用在「遞迴」的運算了！遞迴簡單來說就是有函式在運算中「呼叫自己」的敘述。

遞迴分成「決定基本情況（Base case）」，也就是遞迴的**終止條件**；以及「決定一般情況（General case）」，也就是遞迴的**關係式**。

它的列式通常如下：
```python=
def function_name(num):
    if base_case:
        return base_result
    else:
        return # general_formulation
```

---

大家想想看如果我想要知道費波那契數列中的第 $n$ 個數（數列中的數字為前該數前兩個數相加，假設第一數為 $0$、第二個數為 $1$），我們有甚麼樣的寫法呢？


#### 1. 迴圈寫法
```python=
n = 9 # the length for our Fibonacci Sequence
num1 = 0
num2 = 1
next_num = 0

for i in range(n - 2):  
    next_num = num1 + num2
    num1 = num2
    num2 = next_num
 
print(next_num) # 21
```

#### 2. 函式寫法
```python=
def Fibo(n):
    # Base case n == 1 or n == 2
    if n == 1:
        return 0
    elif n == 2:
        return 1  
    # General case n > 2
    else:
        return Fibo(n - 1) + Fibo(n - 2)
    
print(Fibo(9)) # 21
```
兩種寫法都可以實現我們的目的：找到費波那契數列中的第 $n$ 個數。但在很多時候，函式的寫法可以讓程式更加精簡。

舉例來說，如果我們想求出從 $1$ 到 $n$ 的相加的和，我們可以
```python=
def sum_of_nums(n):
    # Base case
    if n == 1:
        return 1
    #General case
    return n + sumnums(n - 1)
```

### Challenge：河內塔


## 全域變數 v.s. 區域變數
**範圍（Scope）** 在有函式的程式中是重要的觀念，**全域變數**在程式檔案的各處皆可以使用；而**區域變數**則只能在出現在函式中使用，在該函式外便無法取用。

讓我們用一個簡單的例子來理解吧

```python=
def double(num):
    double_num = 2
    return num * double_num

n = 5
print(str(n) + ' times ' + str(double_num) + ' is ' + str(double(n)))
```
我們會得到的此錯誤訊息：
```
---------------------------------------------------------------------------                               
      n = 5
----> print(str(n) + ' times ' + str(double_num) + ' is ' + str(double(n)))

NameError: name 'double_num' is not defined
```

## References
---
If you have any questions regarding the materials, please contact me via Email! 
> debbiehuang35117@gmail.com


